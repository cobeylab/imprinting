p.symp = cbind(baseline.H3*imp.small*age.mod, baseline.H3*imp.med*age.mod, baseline.H3*imp.large*age.mod); colnames(p.symp) = c('small', 'med', 'large')
# Perform a Bernoulli trial for each simulated patient to determine if they are hospitalized or not
sim.duration.status = p.symp*0 # Initialize
for(ii in 1:length(p.symp)){
sim.duration.status[ii] = rbinom(1, 1, p.symp[ii])
}
# Fit a logistic model to simulated data
small.fit = glm(sim.duration.status[,1] ~ simulated.ages + prob.lacks.imprinting, family = binomial)
med.fit = glm(sim.duration.status[,2] ~ simulated.ages + prob.lacks.imprinting, family = binomial)
large.fit = glm(sim.duration.status[,3] ~ simulated.ages + prob.lacks.imprinting, family = binomial)
H3.pvals[ss, 1] = summary(small.fit)$coefficients[3, 4]
H3.pvals[ss, 2] = summary(med.fit)$coefficients[3, 4]
H3.pvals[ss, 3] = summary(large.fit)$coefficients[3, 4]
}
apply(H3.pvals, 2, function(xx) sum(xx <= 0.05))/n.sims
setwd('~/Dropbox/R/INSIGHT/')
setwd('~/Dropbox/R/2017_INSIGHT/')
setwd('~/Dropbox/R/2017_INSIGHT/')
rm(list = ls())
dat.002 = read.csv('data002.csv')
dat.002
dat.002 = read.csv('data002.csv')
head(dat.002)
?read.csv
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'Date', 'logical', 'logical', 'logical', 'logical', 'logical', 'factor', 'logical', 'factor'))
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'Date', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'logical', 'factor'))
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'Date', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor'))
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'Date', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor'))
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'integer', 'character', 'integer', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor'))
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'integer', 'character', 'integer', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor'))
dat.002
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'integer', 'character', 'integer', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor'))
head(dat.002)
dat.002$H1N1 = 0; dat.002$H1N1[which(dat.002$flutype == 1)] = 1
dat.002$H1N1
subset(dat.002, select = c('flutype', 'H1N1'))
dat.002$H1N1 = NA; dat.002$H1N1[which(dat.002$flutype == 1)] = 1; dat.002$H1N1[which(dat.002$flutype == 4)] = 0
subset(dat.002, select = c('flutype', 'H1N1'))
setwd('~/Dropbox/R/2017_INSIGHT/')
rm(list = ls())
dat.002 = read.csv('data002.csv', colClasses = c('factor', 'integer', 'integer', 'integer', 'character', 'integer', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor', 'factor'))
dat.002$H1N1 = NA; dat.002$H1N1[which(dat.002$flutype == 1)] = 1; dat.002$H1N1[which(dat.002$flutype == 4)] = 0
dat.002$H3N2 = NA; dat.002$H3N2[which(dat.002$flutype == 2)] = 1; dat.002$H3N2[which(dat.002$flutype == 4)] = 0
dat.002
subset(dat.002, select = c('flutype', 'H3N2'))
head(dat.002)
dat.002 = read.csv('data002.csv', colClasses = c('character', 'integer', 'integer', 'integer', 'character', 'integer', 'character', 'character', 'character', 'character', 'character', 'character', 'character', 'character'))
dat.002$H1N1 = NA; dat.002$H1N1[which(dat.002$flutype == 1)] = 1; dat.002$H1N1[which(dat.002$flutype == 4)] = 0
dat.002$H3N2 = NA; dat.002$H3N2[which(dat.002$flutype == 2)] = 1; dat.002$H3N2[which(dat.002$flutype == 4)] = 0
dat.002$birth.year = dat.002$year - dat.002$age
summary(dat.002$birth.year)
unique(dat.002$year)
setwd('~/Dropbox/R/2017_INSIGHT/')
rm(list = ls())
# Load data
dat.002 = read.csv('data002.csv', colClasses = c('character', 'integer', 'integer', 'integer', 'character', 'integer', 'character', 'character', 'character', 'character', 'character', 'character', 'character', 'character'))
# Creat logical vectors indicating 1 for confirmed H1N1, 0 for pcr negative
# Leave NA for subtype unknown, flu B and coinfection, and for H3N2
dat.002$H1N1 = NA; dat.002$H1N1[which(dat.002$flutype == 1)] = 1; dat.002$H1N1[which(dat.002$flutype == 4)] = 0
# Repeat, with logical 1 indicating confirmed H3N2 infection in a different column
dat.002$H3N2 = NA; dat.002$H3N2[which(dat.002$flutype == 2)] = 1; dat.002$H3N2[which(dat.002$flutype == 4)] = 0
# Calculate birth year
dat.002$birth.year = dat.002$year - dat.002$age
# Calculate imprinting probs based on birth year
################################################
#STILL NEED TO DO THIS!!!!!!!!!!!!!!!!!!!!
################################################
# Define seasons based on October to October years
head(dat.002)
sort(unique(dat.002$year))
first.part = c('Oct', 'Nov', 'Dec')
yy
yy = 2009
dat.002$year == yy
which(dat.002$year == yy & dat.002$month %in% first.part)
which(dat.002$year == yy & dat.002$month %in% first.part) -> xx
dat.002[xx, ]
dat.002[xx, c('year', 'month')]
which(dat.002$year == yy+1 & dat.002$month !%in% first.part)
dat.002$month %in% first.part)
dat.002$month %in% first.part
which(dat.002$year == yy+1 & ! dat.002$month %in% first.part)
which(dat.002$year == yy+1 & ! dat.002$month %in% first.part) -> xx
dat.002[xx, c('year', 'month')]
unique(dat.002$month)
yy = 2009
NHseason = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
sort(unique(dat.002$year))
NHfirst.part = c('Oct', 'Nov', 'Dec')
NHsecond.part = c('Jan', 'Feb', 'Mar')
SH = c('Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep')
yy = 2009
NHseason = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
SHseason = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
dat.002[NHseason, c('year', 'month', 'country')]
dat.002[NHseason, c('year', 'month', 'Country')]
dat.002[NHseason, c('year', 'month', 'Country')]
head(dat.002)
dat.002[NHseason, c('year', 'month', 'COUNTRY_CODE')]
SHseason = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
dat.002[SHseason, c('year', 'month', 'COUNTRY_CODE')]
dat.002$season = NA
ssn = vector('character', nrow(dat.002)) # Create a new vector to record season codes
ssn
season.codes = c('NH0910', 'SH10', 'NH1011', 'SH11', 'NH1112', 'SH12', 'NH1213', 'SH13', 'NH1314', 'SH14', 'NH1415', 'SH15', 'NH1516', 'SH16', 'NH1617', 'SH17')
length(2009:2017)
paste('NH', c('09', 10:16), 10:17, sep = ''
)
season.codes.NH = paste('NH', c('09', 10:16), 10:17, sep = '.')
season.codes.SH = paste('SH', 10:17, sep = '.')
season.codes.SH
season.codes.NH = paste('NH', c('09', 10:16), 10:17, sep = '.')
season.codes.NH
yy = 2009
for(ii in 1:8){
NH.indices = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
ssn[NH.indices] = season.codes.NH[ii]
SH.indices = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
ssn[SH.indices] = season.codes.SH[ii]
yy = yy + 1
}
yy = 2009
for(ii in 1:8){
NH.indices = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
ssn[NH.indices] = season.codes.NH[ii]
SH.indices = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
ssn[SH.indices] = season.codes.SH[ii]
yy = yy + 1
}
# Assign each observation to a NH or SH season (Oct-March = NH, April - Sept = SH)
yy = 2009
for(ii in 1:8){
NH.indices = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
ssn[NH.indices] = season.codes.NH[ii]
SH.indices = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
ssn[SH.indices] = season.codes.SH[ii]
yy = yy + 1
}
# Add the season assignements to the data frame
dat.002$season = ssn
rm(ssn)
sample(1:nrow(dat.002)) -> xx
sample(1:nrow(dat.002), size = 25, replace = FALSE) -> xx
dat.002[xx, c('month', 'year', 'season')]
source('Clean_CocirculationImport_2017.R')
setwd('~/Dropbox/R/2017_Branching_HA_Imprinting/')
source('Clean_CocirculationImport_2017.R')
birth.years = 1918:2017
infection.years = birth.years
rm(list = ls())
source('Clean_CocirculationImport_2017.R')
ls()
cocirculation
head(cocirculation)
source('Clean_CocirculationImport_2017.R')
rm(list = ls())
source('Clean_CocirculationImport_2017.R')
ls()
cocirculation
get.cocirculation.ref()
get.cocirculation.ref
ls()
get.country.data()
years
source('Clean_CocirculationImport_2017.R')
source('Clean_CocirculationImport_2017.R')
head(cocirculation) # Data frame that records which subtypes circulated in each country and year
weights.master.1 = matrix(NA, nrow = length(Countries.out)*length(years.out), ncol = length(birth.years), dimnames = list(paste(rep(years.out, length(Countries.out)), rep(Countries.out,    each = length(years.out)), sep = ''), rev(birth.years)))
Countries.out = 'China'
weights.master.1 = matrix(NA, nrow = length(Countries.out)*length(years.out), ncol = length(birth.years), dimnames = list(paste(rep(years.out, length(Countries.out)), rep(Countries.out,    each = length(years.out)), sep = ''), rev(birth.years)))
years.out = 2015
weights.master.1 = matrix(NA, nrow = length(Countries.out)*length(years.out), ncol = length(birth.years), dimnames = list(paste(rep(years.out, length(Countries.out)), rep(Countries.out,    each = length(years.out)), sep = ''), rev(birth.years)))
weights.master.2 = weights.master.naiive = weights.master.3 = weights.master.1
weights.master.1 = matrix(NA, nrow = length(Countries.out)*length(years.out), ncol = length(birth.years), dimnames = list(paste(rep(years.out, length(Countries.out)), rep(Countries.out,    each = length(years.out)), sep = ''), rev(birth.years)))
birth.years = 1918:20
birth.years = 1918:2017
infection.years = birth.years
weights.master.1 = matrix(NA, nrow = length(Countries.out)*length(years.out), ncol = length(birth.years), dimnames = list(paste(rep(years.out, length(Countries.out)), rep(Countries.out,    each = length(years.out)), sep = ''), rev(birth.years)))
weights.master.1
type1.dat = (cocirculation.dat['H1', as.character(birth.years)])
source('Clean_CocirculationImport_2017.R')
head(cocirculation) # Data frame that records which subtypes circulated in each country and year
birth.years = 1918:2017
infection.years = birth.years
weights.master.1 = matrix(NA, nrow = length(Countries.out)*length(years.out), ncol = length(birth.years), dimnames = list(paste(rep(years.out, length(Countries.out)), rep(Countries.out, each = length(years.out)), sep = ''), rev(birth.years))) # Initialize a matrix in which to store probs of H1N1 imprinting
weights.master.2 = weights.master.naiive = weights.master.3 = weights.master.1
cc = 1
Countries.out
if(Countries.out[cc] == 'China'){cocirculation.dat = get.cocirculation.ref('China')}
cocirculation.dat['H1', as.character(birth.years)]
years.out = 2015
H1.mat = matrix(0, nrow = length(years.out), ncol = length(birth.years), dimnames = list((years.out), (birth.years)))
naiive.mat = H2.mat = H3.mat = H1.mat
for(jj in 1:length(years.out)){
for(ii in 1:(years.out[jj]-1918+1)){ #for all relevant birth years
n.inf.years = min(12, years.out[jj]-birth.years[ii])
inf.probs = get.e_ij(birth.years[ii], years.out[jj])
#If all 13 possible years of infection have passed, normalize
if(length(inf.probs) == 13) inf.probs = inf.probs/sum(inf.probs)
#Fill in the appropriate row (observation year) and column (birth year) of the output matrix
H1.mat[jj, ii] = sum(inf.probs*type1.dat[as.character(birth.years[ii:(ii+n.inf.years)])])
H2.mat[jj, ii] = sum(inf.probs*type2.dat[as.character(birth.years[ii:(ii+n.inf.years)])])
H3.mat[jj, ii] = sum(inf.probs*type3.dat[as.character(birth.years[ii:(ii+n.inf.years)])])
naiive.mat[jj, ii] = round(1-sum(inf.probs), digits = 8) #Rounds to the nearest 8 to avoid machine 0 errors
}
}
source('gete_ij_2017.R')
get.infection.weights = function(years.out){
H1.mat = matrix(0, nrow = length(years.out), ncol = length(birth.years), dimnames = list((years.out), (birth.years)))
naiive.mat = H2.mat = H3.mat = H1.mat
for(jj in 1:length(years.out)){
for(ii in 1:(years.out[jj]-1918+1)){ #for all relevant birth years
n.inf.years = min(12, years.out[jj]-birth.years[ii])
inf.probs = get.e_ij(birth.years[ii], years.out[jj])
#If all 13 possible years of infection have passed, normalize
if(length(inf.probs) == 13) inf.probs = inf.probs/sum(inf.probs)
#Fill in the appropriate row (observation year) and column (birth year) of the output matrix
H1.mat[jj, ii] = sum(inf.probs*type1.dat[as.character(birth.years[ii:(ii+n.inf.years)])])
H2.mat[jj, ii] = sum(inf.probs*type2.dat[as.character(birth.years[ii:(ii+n.inf.years)])])
H3.mat[jj, ii] = sum(inf.probs*type3.dat[as.character(birth.years[ii:(ii+n.inf.years)])])
naiive.mat[jj, ii] = round(1-sum(inf.probs), digits = 8) #Rounds to the nearest 8 to avoid machine 0 errors
}
}
#return the output in order of 2015:2918
H1.mat = H1.mat[,as.character(max(birth.years):min(birth.years))]
H2.mat = H2.mat[,as.character(max(birth.years):min(birth.years))]
H3.mat = H3.mat[,as.character(max(birth.years):min(birth.years))]
naiive.mat = naiive.mat[,as.character(max(birth.years):min(birth.years))]
#   if(type == 1){return(H1.mat)}
#   if(type == 2){return(H2.mat)}
#   if(type == 3){return(H3.mat)}
#   if(type == 4){return(naiive.mat)}
return(list(H1.mat = H1.mat, H2.mat = H2.mat, H3.mat = H3.mat, naiive.mat = naiive.mat))
}
wts = get.infection.weights(years.out = years.out) #Get all weight types for the year of interest
weights.master.1
intensities = read.csv('Intensitymatser.csv', col.names = c('Year', 'Intensity')); rownames(intensities) = 1911:2015
intensities = read.csv('Intensitymatser.csv', col.names = c('Year', 'Intensity')); rownames(intensities) = 1911:2017
load('pest.RData') # Load the annual probability of first infection, estimated from serological data (see two papers by Sauerbrei et al.)
weighted.attack.rate = p.est*(intensities$Intensity); names(weighted.attack.rate) = 1911:2015
jjs = birth.year:min(birth.year+12, incidence.year) #Possible years of first infection (ages 0-12)
nn = length(jjs) # Number of possible years of 1st inf.
birth.year = 2009
incidence.year = 2000
jjs = birth.year:min(birth.year+12, incidence.year) #Possible years of first infection (ages 0-12)
nn = length(jjs) # Number of possible years of 1st inf.
ajs = weighted.attack.rate[as.character(jjs)] #Get weighted attack rates "p" corresponding to possible years of first infection
jjs
nns
nn
ajs
total <- matrix(NA, nrow=nn, ncol=nn); #want to be a MATRIX
total
mm = nn - exp1 # Number of possible years of 2nd inf.
years.not.infected1 = prod(1-ajs[1:exp1-1]) #probability p of NOT getting infected: "(1-p)^(x-1)"
prod(1-ajs[1:exp1-1])
exp1 = 1
prod(1-ajs[1:exp1-1])
exp1 = 5
prod(1-ajs[1:exp1-1])
1-ajs[1:exp1-1]
exp1
start_2 = exp1 + 1
start_2
start_2:(start_2+mm-1)
prod(1-ajs[start_2:exp2-1])
exp2 = 6
1-ajs[start_2:exp2-1]
start_2
start_2:exp2-1
start_2 = exp1 + 1
start_2
exp2 = 8
start_2:exp2-1
1:exp1-1
source('~/Dropbox/R/2017_Branching_HA_Imprinting/Clean_CocirculationImport_2017.R', echo=TRUE)
cocirculation
if(Countries.out[cc] == 'China'){cocirculation.dat = get.cocirculation.ref('China')}
cocirculation.dat
getwd()
write.csv(cocirculation.dat, file = 'China_flu_circulation.csv')
raw = read.csv('~/Dropbox/R/Reconstructions/')
raw = read.csv('~/Dropbox/R/Reconstructions/Australia_cocirculation.csv')
rm(list = ls())
raw = read.csv('~/Dropbox/R/Reconstructions/Australia_cocirculation.csv')
raw = read.csv('~/Dropbox/R/Reconstructions/Australia_cocirculation.csv', skip = 3)
raw = read.csv('~/Dropbox/R/Reconstructions/Australia_cocirculation.csv', skip = 3, stringsAsFactors = FALSE)
rwa
raw
yrs = unique(raw$Year)
yrs
yrs = sort(unique(raw$Year))
countries = sort(unique(raw$Country))
countries
output = matrix(NA, nrow = 4*length(yrs)*length(countries))
output
output = matrix(NA, nrow = 4*length(yrs)*length(countries), ncol = 4)
c1 = rep(countires, each = length(yrs)*4)
c1 = rep(countries, each = length(yrs)*4)
c1
c2 = rep(yrs, each = 4)
c2
cc = 1
c1 = rep(countries[cc], each = length(yrs)*4)
c2 = rep(yrs, each = 4)
c1
c2
c3 = rep(c('H1', 'H1p09', 'H3', 'A'), times = length(yrs))
c3
c4 = integer(length(yrs*4))
output = data.frame(c1, c2, c3, c4)
output
valid = subset(raw, Country == countries[cc])
valid
head(valid)
valid2 = subset(valid, Year == yrs[yy])
yy = 1
valid2 = subset(valid, Year == yrs[yy])
valid2
valid2 = subset(valid, Year == yrs[yy], select = c('AH1', 'AH1N12009', 'AH3'))
valid2
yrs
yrs[yy]
yy = 3
valid2 = subset(valid, Year == yrs[yy], select = c('AH1', 'AH1N12009', 'AH3'))
valid2
yr.dat = colSums(valid2, na.rm = TRUE)
yr.dat
yr.dat = c(colSums(valid2, na.rm = TRUE), sum(valid2, na.rm = TRUE))
yr.dat
yy = 1
(yy-1)*4 + 1:4
yy = yy+1; (yy-1)*4 + 1:4
yy = yy+1; (yy-1)*4 + 1:4
yy = yy+1; (yy-1)*4 + 1:4
yy = yy+1; (yy-1)*4 + 1:4
yy = yy+1; (yy-1)*4 + 1:4
yy = yy+1; (yy-1)*4 + 1:4
c4[(yy-1)*4 + 1:4] = as.integer(yr.dat)
c4
for(cc in 1:length(countries)){
# Extract data from country of interest
valid = subset(raw, Country == countries[cc])
# Read available years
yrs = sort(unique(valid$Year))
# Initialize output data frame
c1 = rep(countries[cc], each = length(yrs)*4)
c2 = rep(yrs, each = 4)
c3 = rep(c('H1', 'H1p09', 'H3', 'A'), times = length(yrs))
c4 = integer(length(yrs*4))
output = data.frame(c1, c2, c3, c4)
# Fill in the number of samples for each year and subtype
for(yy in 1:length(yrs)){
valid2 = subset(valid, Year == yrs[yy], select = c('AH1', 'AH1N12009', 'AH3'))
yr.dat = c(colSums(valid2, na.rm = TRUE), sum(valid2, na.rm = TRUE))
c4[(yy-1)*4 + 1:4] = as.integer(yr.dat)
}
}
c4
## Write a function to reformat WHO data
rm(list = ls())
## Load data
raw = read.csv('~/Dropbox/R/Reconstructions/Australia_cocirculation.csv', skip = 3, stringsAsFactors = FALSE)
# Read available countries
countries = sort(unique(raw$Country))
for(cc in 1:length(countries)){
# Extract data from country of interest
valid = subset(raw, Country == countries[cc])
# Read available years
yrs = sort(unique(valid$Year))
# Initialize output data frame
c1 = rep(countries[cc], each = length(yrs)*4)
c2 = rep(yrs, each = 4)
c3 = rep(c('H1', 'H1p09', 'H3', 'A'), times = length(yrs))
c4 = integer(length(yrs*4))
# Fill in the number of samples for each year and subtype
for(yy in 1:length(yrs)){
valid2 = subset(valid, Year == yrs[yy], select = c('AH1', 'AH1N12009', 'AH3'))
yr.dat = c(colSums(valid2, na.rm = TRUE), sum(valid2, na.rm = TRUE))
c4[(yy-1)*4 + 1:4] = as.integer(yr.dat)
}
# Format this country's results
output = data.frame(c1, c2, c3, c4)
# If only one country output the results
# Else, rbind results form each country and output
if(cc == 1){
full.list = output
}else{
full.list = rbind(full.list, output)
}
}
full.list
## Write a function to reformat WHO data
rm(list = ls())
setwd('~/Dropbox/R/Reconstructions/')
## Load data
raw = read.csv('~/Dropbox/R/Reconstructions/Australia_cocirculation.csv', skip = 3, stringsAsFactors = FALSE)
# Read available countries
countries = sort(unique(raw$Country))
for(cc in 1:length(countries)){
# Extract data from country of interest
valid = subset(raw, Country == countries[cc])
# Read available years
yrs = sort(unique(valid$Year))
# Initialize output data frame
c1 = rep(countries[cc], each = length(yrs)*4)
c2 = rep(yrs, each = 4)
c3 = rep(c('H1', 'H1p09', 'H3', 'A'), times = length(yrs))
c4 = integer(length(yrs*4))
# Fill in the number of samples for each year and subtype
for(yy in 1:length(yrs)){
valid2 = subset(valid, Year == yrs[yy], select = c('AH1', 'AH1N12009', 'AH3'))
yr.dat = c(colSums(valid2, na.rm = TRUE), sum(valid2, na.rm = TRUE))
c4[(yy-1)*4 + 1:4] = as.integer(yr.dat)
}
# Format this country's results
output = data.frame(c1, c2, c3, c4)
# If only one country output the results
# Else, rbind results form each country and output
if(cc == 1){
full.list = output
}else{
full.list = rbind(full.list, output)
}
}
full.list
write.csv(full.list, file = 'Reformatted_output.csv')
rm(list = ls())
setwd('~/Dropbox/R/Reconstructions/')
raw = read.csv('~/Dropbox/R/Reconstructions/Austria_cocirculation.csv', skip = 3, stringsAsFactors = FALSE)
countries = sort(unique(raw$Country))
for(cc in 1:length(countries)){
# Extract data from country of interest
valid = subset(raw, Country == countries[cc])
# Read available years
yrs = sort(unique(valid$Year))
# Initialize output data frame
c1 = rep(countries[cc], each = length(yrs)*4)
c2 = rep(yrs, each = 4)
c3 = rep(c('H1', 'H1p09', 'H3', 'A'), times = length(yrs))
c4 = integer(length(yrs*4))
# Fill in the number of samples for each year and subtype
for(yy in 1:length(yrs)){
valid2 = subset(valid, Year == yrs[yy], select = c('AH1', 'AH1N12009', 'AH3'))
yr.dat = c(colSums(valid2, na.rm = TRUE), sum(valid2, na.rm = TRUE))
c4[(yy-1)*4 + 1:4] = as.integer(yr.dat)
}
# Format this country's results
output = data.frame(c1, c2, c3, c4)
# If only one country output the results
# Else, rbind results form each country and output
if(cc == 1){
full.list = output
}else{
full.list = rbind(full.list, output)
}
}
full.list
write.csv(full.list, file = 'Reformatted_output.csv')
raw = read.csv('~/Dropbox/R/Reconstructions/Belgium_cocirculation.csv', skip = 3, stringsAsFactors = FALSE)
source('~/Dropbox/R/Reconstructions/Reformat_WHO_to_master.R', echo=TRUE)
setwd('~/Dropbox/R/2017_INSIGHT/')
rm(list = ls())
# Load data
dat.002 = read.csv('data002.csv', colClasses = c('character', 'integer', 'integer', 'integer', 'character', 'integer', 'character', 'character', 'character', 'character', 'character', 'character', 'character', 'character'))
# Creat logical vectors indicating 1 for confirmed H1N1, 0 for pcr negative
# Leave NA for subtype unknown, flu B and coinfection, and for H3N2
dat.002$H1N1 = NA; dat.002$H1N1[which(dat.002$flutype == 1)] = 1; dat.002$H1N1[which(dat.002$flutype == 4)] = 0
# Repeat, with logical 1 indicating confirmed H3N2 infection in a different column
dat.002$H3N2 = NA; dat.002$H3N2[which(dat.002$flutype == 2)] = 1; dat.002$H3N2[which(dat.002$flutype == 4)] = 0
# Calculate birth year
dat.002$birth.year = dat.002$year - dat.002$age
# Calculate imprinting probs based on birth year
################################################
#STILL NEED TO DO THIS!!!!!!!!!!!!!!!!!!!!
################################################
# Define seasons based on October to October years
sort(unique(dat.002$year))
NHfirst.part = c('Oct', 'Nov', 'Dec')
NHsecond.part = c('Jan', 'Feb', 'Mar')
SH = c('Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep')
ssn = vector('character', nrow(dat.002)) # Create a new vector to record season codes
season.codes.NH = paste('NH', c('09', 10:16), 10:17, sep = '.')
season.codes.SH = paste('SH', 10:17, sep = '.')
# Assign each observation to a NH or SH season (Oct-March = NH, April - Sept = SH)
yy = 2009
for(ii in 1:8){
NH.indices = c(which(dat.002$year == yy & dat.002$month %in% NHfirst.part), which(dat.002$year == yy+1 &  dat.002$month %in% NHsecond.part))
ssn[NH.indices] = season.codes.NH[ii]
SH.indices = which(dat.002$year == yy + 1 & dat.002$month %in% SH)
ssn[SH.indices] = season.codes.SH[ii]
yy = yy + 1
}
# Add the season assignements to the data frame
dat.002$season = ssn
rm(ssn)
head(dat.002)
glm(H1N1 ~ age + factor(anyvac) + factor(anyav) + factor(anydx) + factor(COUNTRY_CODE) + factor(season))
?glm
glm(H1N1 ~ age + factor(anyvac) + factor(anyav) + factor(anydx) + factor(COUNTRY_CODE) + factor(season), data = dat.002, family = binomial)
fit1 = glm(H1N1 ~ age + factor(anyvac) + factor(anyav) + factor(anydx) + factor(COUNTRY_CODE) + factor(season), data = dat.002, family = binomial)
summary(fit1)
valid = dat.002[which(!isna(H1N1)), ]
valid = dat.002[which(!is.na(H1N1)), ]
valid = dat.002[which(!is.na(dat.002$H1N1)), ]
valid
fit1 = glm(H1N1 ~ age + factor(anyvac) + factor(anyav) + factor(anydx) + factor(COUNTRY_CODE) + factor(season), data = valid, family = binomial)
valid = dat.002[which(!is.na(dat.002$H1N1)), ]
fit1 = glm(H1N1 ~ age + factor(anyvac) + factor(anyav) + factor(anydx) + factor(COUNTRY_CODE) + factor(season), data = valid, family = binomial)
summary(fit1)
unique(dat.002$anyvax)
unique(dat.002$anyvac)
